/* 
FORMER CODE FOR THE SERVER.JS FILE 


const express = require('express');
const app = express();
const port = 3000;

const mariadb = require('mariadb');
const pool = mariadb.createPool({
    host: 'localhost',
    user: 'root',
    password: 'root',
    database: 'sample',
    port: 3306,
    connectionLimit: 5
});

// Get all data from 'student' table
app.get('/student', async (req, res) => {
    const conn = await pool.getConnection();
    const rows = await conn.query('SELECT * FROM student');
    res.json(rows);
});

// Get all data from 'company' table
app.get('/company', async (req, res) => {
    const conn = await pool.getConnection();
    const rows = await conn.query('SELECT * FROM company');
    res.json(rows);
});

// Get all data from 'orders' table
app.get('/orders', async (req, res) => {
    const conn = await pool.getConnection();
    const rows = await conn.query('SELECT * FROM orders');
    res.json(rows);
});

app.listen(port, () => {
    console.log(App running on http://localhost:${port});
});

 */










//SWAGGER updated server.js code with all new endpoints and swagger docs 

const express = require('express');
const app = express();
const port = 3000;

const mariadb = require('mariadb');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');
const { body, validationResult } = require('express-validator');

// MariaDB connection pool
const pool = mariadb.createPool({
    host: '147.182.178.196',
    user: 'root',
    password: 'root',
    database: 'sample',
    port: 3306,
    connectionLimit: 5
});

// Swagger configuration
const options = {
    swaggerDefinition: {
        openapi: '3.0.0',
        info: {
            title: 'Student, Company, and Orders API',
            version: '1.0.0',
            description: 'API autogenerated by Swagger for accessing student, company, and orders data.',
        },
        servers: [
            {
                url: 'http://147.182.178.196:3000',
                description: 'Local server',
            },
        ],
    },
    apis: ['./server.js'],
};
const specs = swaggerJsdoc(options);

// Swagger and CORS
app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs)); 
app.use(cors());
app.use(express.json()); 

/**
 * @swagger
 * /student:
 *   post:
 *     summary: Add a new student
 *     description: Adds a new student to the student table.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               title:
 *                 type: string
 *               class:
 *                 type: string
 *               section:
 *                 type: string
 *               rollid:
 *                 type: integer
 *     responses:
 *       201:
 *         description: The student was created successfully.
 *       400:
 *         description: Invalid input data.
 */
app.post('/student',
  // Validation and sanitization
  body('name').isString().trim().escape().notEmpty().withMessage('Name is required'),
  body('title').isString().trim().escape().notEmpty().withMessage('Title is required'),
  body('class').isString().trim().escape().notEmpty().withMessage('Class is required'),
  body('section').isString().trim().escape().notEmpty().withMessage('Section is required'),
  body('rollid').isDecimal().withMessage('RollID must be a number').notEmpty().withMessage('RollID is required'),

  async (req, res) => {
    // Validation result
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { name, title, class: studentClass, section, rollid } = req.body;

    const conn = await pool.getConnection();

    try {
        // Insert the student into the database using 'Class'
        const result = await conn.query('INSERT INTO student (NAME, TITLE, CLASS, SECTION, ROLLID) VALUES (?, ?, ?, ?, ?)',
            [name, title, studentClass, section, rollid]);

        // Respond with success and the new student ID 
        res.status(201).json({ message: 'Student added', id: result.insertId });
    } catch (err) {
        res.status(500).json({ message: 'Error adding student', error: err });
    } finally {
        conn.end(); 
    }
});

/**
 * @swagger
 * /student:
 *   get:
 *     summary: Retrieve all students
 *     description: Retrieve all records from the student table.
 *     responses:
 *       200:
 *         description: A list of students.
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 */
app.get('/student', async (req, res) => {
    const conn = await pool.getConnection();
    const rows = await conn.query('SELECT * FROM student');
    res.json(rows);
});

/**
 * @swagger
 * /company:
 *   get:
 *     summary: Retrieve all companies
 *     description: Retrieve all records from the company table.
 *     responses:
 *       200:
 *         description: A list of companies.
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
*/
app.get('/company', async (req, res) => {
    const conn = await pool.getConnection();
    const rows = await conn.query('SELECT * FROM company');
    res.json(rows);
});

/**
 * @swagger
 * /orders:
 *   get:
 *     summary: Retrieve all orders
 *     description: Retrieve all records from the orders table.
 *     responses:
 *       200:
 *         description: A list of orders.
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 */
app.get('/orders', async (req, res) => {
    const conn = await pool.getConnection();
    const rows = await conn.query('SELECT * FROM orders');
    res.json(rows);
});

/**
 * @swagger
 * /orders/{id}:
 *   patch:
 *     summary: Update an existing order
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Order ID
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               ord_amount:
 *                 type: number
 *               advance_amount:
 *                 type: number
 *               ord_date:
 *                 type: string
 *                 format: date
 *               cust_code:
 *                 type: string
 *               agent_code:
 *                 type: string
 *               ord_description:
 *                 type: string
 *     responses:
 *       200:
 *         description: The order was updated successfully.
 *       400:
 *         description: Invalid input data.
 */
app.patch('/orders/:id',
    // Validation for order update
  body('ord_amount').isDecimal().withMessage('Amount must be a decimal').notEmpty().withMessage('Amount is required'),
  body('advance_amount').isDecimal().withMessage('Advance amount must be a decimal').notEmpty().withMessage('Advance amount is required'),
  body('ord_date').isDate().withMessage('Invalid date format').notEmpty().withMessage('Date is required'),
  body('cust_code').isString().trim().escape().notEmpty().withMessage('Customer code is required'),
  body('agent_code').isString().trim().escape().notEmpty().withMessage('Agent code is required'),
  body('ord_description').isString().trim().escape().notEmpty().withMessage('Description is required'),

  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { id } = req.params;
    const { ord_amount, advance_amount, ord_date, cust_code, agent_code, ord_description } = req.body;

    const conn = await pool.getConnection();
    try {
      const result = await conn.query('UPDATE orders SET ORD_AMOUNT = ?, ADVANCE_AMOUNT = ?, ORD_DATE = ?, CUST_CODE = ?, AGENT_CODE = ?, ORD_DESCRIPTION = ? WHERE ORD_NUM = ?',
        [ord_amount, advance_amount, ord_date, cust_code, agent_code, ord_description, id]);
      res.status(200).json({ message: 'Order updated', id: result.insertId });
    } catch (err) {
      res.status(500).json({ message: 'Error updating order', error: err });
    } finally {
      conn.end();
    }
  }
);

/**
 * @swagger
 * /company/{id}:
 *   put:
 *     summary: Update an existing company
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Company ID
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               company_name:
 *                 type: string
 *               company_city:
 *                 type: string
 *     responses:
 *       200:
 *         description: The company was updated successfully.
 *       400:
 *         description: Invalid input data.
 */
app.put('/company/:id',
    // Validation for company update
    body('company_name').isString().trim().escape().notEmpty().withMessage('Company name is required'),
    body('company_city').isString().trim().escape().notEmpty().withMessage('Company city is required'),
  
    async (req, res) => {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }
  
      const { id } = req.params;
      const { company_name, company_city } = req.body;
  
      const conn = await pool.getConnection();
      try {
        const result = await conn.query('UPDATE company SET COMPANY_NAME = ?, COMPANY_CITY = ? WHERE COMPANY_ID = ?',
          [company_name, company_city, id]);
        res.status(200).json({ message: 'Company updated', id: result.insertId });
      } catch (err) {
        res.status(500).json({ message: 'Error updating company', error: err });
      } finally {
        conn.end();
      }
    }
  );

  /**
 * @swagger
 * /company/{id}:
 *   delete:
 *     summary: Delete a company
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Company ID
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: The company was deleted successfully.
 */
app.delete('/company/:id', async (req, res) => {
    const { id } = req.params;
    const conn = await pool.getConnection();
    try {
      const result = await conn.query('DELETE FROM company WHERE COMPANY_ID = ?', [id]);
      res.status(200).json({ message: 'Company deleted' });
    } catch (err) {
      res.status(500).json({ message: 'Error deleting company', error: err });
    } finally {
      conn.end();
    }
  });
  
  // Server running
  app.listen(port, () => {
      console.log(`App running on http://localhost:${port}`);
      console.log(`Swagger docs available at http://localhost:${port}/docs`);
  });
  
  



